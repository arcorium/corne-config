#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        lsft_caps: lsft_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "LSFT_CAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPSLOCK>;
        };

        lctl_win: lctl_win {
            compatible = "zmk,behavior-tap-dance";
            label = "LCTL_WIN";
            #binding-cells = <0>;
            bindings = <&kp LCTRL>, <&kp LEFT_GUI>;
        };

        rsft_win: rsft_win {
            compatible = "zmk,behavior-tap-dance";
            label = "RSFT_WIN";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&kp RIGHT_GUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp TAB     &kp Q  &kp W  &kp E               &kp R  &kp T        &kp Y      &kp U  &kp I            &kp O    &kp P          &kp BACKSPACE
&lsft_caps  &kp A  &kp S  &kp D               &kp F  &kp G        &kp H      &kp J  &kp K            &kp L    &kp SEMICOLON  &rsft_win
&lctl_win   &kp Z  &kp X  &kp C               &kp V  &kp B        &kp N      &kp M  &kp COMMA        &kp DOT  &lt 6 FSLH     &mt RCTRL ESCAPE
                          &mt LEFT_ALT GRAVE  &mo 3  &kp SPACE    &kp ENTER  &mo 4  &mt RIGHT_ALT B
            >;
        };

        Nulled {
            bindings = <
&kp TAB     &mkp LCLK  &mkp MB4  &mkp MB3            &mkp MB5  &mkp RCLK    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP     &msc SCRL_RIGHT  &none  &kp BACKSPACE
&lsft_caps  &none      &none     &none               &none     &none        &kp LEFT        &kp DOWN        &kp UP           &kp RIGHT        &none  &rsft_win
&lctl_win   &none      &none     &none               &none     &none        &none           &none           &none            &none            &mo 6  &mt RCTRL ESCAPE
                                 &mt LEFT_ALT GRAVE  &mo 3     &kp SPACE    &kp ENTER       &mo 4           &mt RIGHT_ALT B
            >;
        };

        Numpad {
            bindings = <
&kp TAB        &kp KP_SUBTRACT  &kp KP_NUMBER_9  &kp KP_NUMBER_8     &kp KP_NUMBER_7  &kp KP_NUM         &kp KP_NUMLOCK  &kp KP_N7  &kp KP_N8        &kp KP_N9  &kp KP_SUBTRACT    &kp BACKSPACE
&kp KP_DIVIDE  &kp KP_PLUS      &kp KP_NUMBER_6  &kp KP_NUMBER_5     &kp KP_NUMBER_4  &kp KP_DOT         &kp KP_DOT      &kp KP_N4  &kp KP_N5        &kp KP_N6  &kp KP_PLUS        &kp KP_DIVIDE
&kp CARET      &kp KP_MULTIPLY  &kp KP_NUMBER_3  &kp KP_NUMBER_2     &kp KP_NUMBER_1  &kp KP_NUMBER_0    &kp KP_N0       &kp KP_N1  &kp KP_N2        &kp KP_N3  &lt 6 KP_ASTERISK  &kp CARET
                                                 &mt LEFT_ALT GRAVE  &mo 3            &kp SPACE          &kp KP_ENTER    &mo 4      &mt RIGHT_ALT B
            >;
        };

        Lower {
            bindings = <
&kp ESCAPE  &kp F1    &kp F2       &kp F3    &kp F4      &kp F5         &kp F6     &kp F7         &kp F8        &kp F9                &kp F10                &kp DELETE
&trans      &kp N1    &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp F11
&trans      &kp EXCL  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F12
                                   &trans    &trans      &kp ENTER      &kp SPACE  &trans         &trans
            >;
        };

        Raise {
            bindings = <
&kp ESCAPE  &kp MINUS      &kp UNDERSCORE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH        &kp EXCLAMATION  &kp AMPERSAND  &kp CAPSLOCK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp DELETE
&trans      &kp EQUAL      &kp PLUS          &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp PIPE             &kp LEFT         &kp DOWN       &kp UP_ARROW  &kp RIGHT             &kp SEMICOLON          &trans
&trans      &kp LESS_THAN  &kp GREATER_THAN  &kp QUESTION      &kp SINGLE_QUOTE   &kp DOUBLE_QUOTES    &kp INSERT       &kp HOME       &kp END       &kp PAGE_UP           &kp PAGE_DOWN          &trans
                                             &trans            &trans             &kp ENTER            &kp SPACE        &trans         &trans
            >;
        };

        Adjust {
            bindings = <
&kp ESCAPE  &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &kp KP_NUM      &kp C_BRIGHTNESS_DEC  &trans            &kp C_BRIGHTNESS_INC  &kp CAPSLOCK     &kp DELETE
&trans      &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &kp SCROLLLOCK  &kp C_VOL_DN          &kp C_MUTE        &kp C_VOL_UP          &caps_word       &trans
&trans      &bt BT_CLR_ALL  &trans         &trans         &trans         &bt BT_CLR       &key_repeat     &kp C_PREV            &kp C_PLAY_PAUSE  &kp C_NEXT            &kp PRINTSCREEN  &trans
                                           &trans         &trans         &kp ENTER        &kp SPACE       &trans                &trans
            >;
        };

        Switch {
            bindings = <
&kp TAB  &to 0   &to 1   &to 2   &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp DELETE
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
